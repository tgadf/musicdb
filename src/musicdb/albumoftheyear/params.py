""" Master Container Class For AlbumOfTheYear DB """__all__ = ["MusicDBParams"]from dbbase import MusicDBParamsBasefrom dbparse import ParseFileType, ConcatFileTypeclass MusicDBParams(MusicDBParamsBase):    def __repr__(self):        return f"MusicDBParams(db={self.db}, dir={self.dir}, short={self.short})"        def __init__(self, **kwargs):        super().__init__(**kwargs)        # Basic Params        self.db = "AlbumOfTheYear"        self.dir = "albumoftheyear"        self.short = "aoty"                # MediaUtils        self.mediaTypes = ['Single', 'Live', 'Single', 'EP', 'LP', 'DJ Mix',                           'Box Set', 'Instrumental', 'Soundtrack', 'Reissue',                           'Score', 'Compilation', 'Mixtape', 'Remix', "Cover",                           "Holiday", "Unofficial", "Album", "Video", "Bootleg",                           "Reissue", "Holiday", "Demo", "Audiobook"]                        # Parse Type IO        self.parseMap["Artist"] = ParseFileType(inputName="Artist",                                                parseName="Artist",                                                inputType="General",                                                outputName=[None, "ShuffleMedia"],                                                outputLevel=[0, 2],                                                outputFormat=["DataFrame", "Series"])        self.parseMap["Album"] = ParseFileType(inputName="Album",                                               parseName="Album",                                               inputType="General",                                               outputName="Album",                                               outputLevel=1,                                               outputFormat="DataFrame")                # Concat Type IO        self.concatMap["ShuffleMedia"] = ConcatFileType(inputName="ShuffleMedia",                                                        inputType="Shuffle",                                                        outputName="ArtistMedia",                                                        outputFormat="DataFrame")                # Metadata Media Ranking        self.mediaRanking['A'] = ['LP', "Compilation", "Box Set", "Reissue", "LPEP", "Limited Edition"]        self.mediaRanking['B'] = ['Single', "EP", "ep", "Mini LP"]        self.mediaRanking['C'] = ['Cover']        self.mediaRanking['D'] = ['Score', 'Soundtrack', 'Instrumental']        self.mediaRanking['E'] = ['Mixtape', 'Remix', 'DJ Mix']        self.mediaRanking['F'] = ['Live', 'LIve', 'Unofficial', 'Holiday', "Demo", "Audiobook", "Bootleg", "LP â€¢ David Shea â€¢ Scanner"]        self.mediaRanking['G'] = ['Video', 'Visual']                # Match Omit        self.omit["Traditional"] = '320156'        self.omit["Unknown"] = '355'        self.omit["Various"] = '194'                