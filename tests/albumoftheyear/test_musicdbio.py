from musicdb.albumoftheyear import MusicDBIOfrom musicdb.albumoftheyear import MusicDBParamsfrom dbbase import MusicDBRootDataIOfrom dbparse import MusicDBGroupDataIOfrom musicdb.albumoftheyear import RawDataIOfrom musicdb.albumoftheyear import MusicDBIDfrom musicdb.albumoftheyear import ParseDataIOfrom musicdb.albumoftheyear import ConcatDataIOfrom musicdb.albumoftheyear import MergeDataIOfrom musicdb.albumoftheyear import MetaProducerIOfrom dbmeta import SummaryProducerIOfrom musicdb.albumoftheyear import MediaSummaryProducerIOfrom dbmeta import MatchProducerIOdef test_musicdbio():    mdbio = MusicDBIO()    assert mdbio.db == MusicDBParams().db, f"MusicDBIO db [{mdbio.db}] is not correct!"        attrMap = {'rawio': RawDataIO, 'mdbid': MusicDBID, 'rdio': MusicDBRootDataIO,               'pdio': ParseDataIO, 'cdio': ConcatDataIO, 'mdio': MergeDataIO,               'gdio': MusicDBGroupDataIO,               'metaprodio': MetaProducerIO, 'sumprodio': SummaryProducerIO,               'medsumprodio': MediaSummaryProducerIO, 'matchprodio': MatchProducerIO}    for attr, attrCls in attrMap.items():        assert hasattr(mdbio, attr), f"mdbio [{mdbio}] has no {attr} attr"        assert isinstance(getattr(mdbio, attr), attrCls), f"mdbio [{mdbio}] {attr} is not a {attrCls}"        assert hasattr(mdbio, "getdbid"), f"mdbio [{mdbio}] has no rawio attr"    assert callable(getattr(mdbio, "getdbid")), f"mdbio [{mdbio}] getdbid is not callable"